/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_bexter_free(a: number): void;
export function bexter_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number): void;
export function bexter_new_with_bext(a: number, b: number, c: number): void;
export function bexter_new_with_raw(a: number, b: number, c: number, d: number, e: number): void;
export function bexter_new_with_qb64b(a: number, b: number, c: number): void;
export function bexter_new_with_qb64(a: number, b: number, c: number): void;
export function bexter_new_with_qb2(a: number, b: number, c: number): void;
export function bexter_bext(a: number, b: number): void;
export function bexter_code(a: number, b: number): void;
export function bexter_size(a: number): number;
export function bexter_raw(a: number, b: number): void;
export function bexter_qb64(a: number, b: number): void;
export function bexter_qb64b(a: number, b: number): void;
export function bexter_qb2(a: number, b: number): void;
export function dater_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number): void;
export function dater_new_with_dts(a: number, b: number, c: number, d: number, e: number): void;
export function dater_new_with_raw(a: number, b: number, c: number, d: number, e: number): void;
export function dater_new_with_qb64b(a: number, b: number, c: number): void;
export function dater_new_with_qb64(a: number, b: number, c: number): void;
export function dater_new_with_qb2(a: number, b: number, c: number): void;
export function dater_dts(a: number, b: number): void;
export function dater_dtsb(a: number, b: number): void;
export function dater_code(a: number, b: number): void;
export function dater_size(a: number): number;
export function dater_raw(a: number, b: number): void;
export function dater_qb64(a: number, b: number): void;
export function dater_qb64b(a: number, b: number): void;
export function dater_qb2(a: number, b: number): void;
export function __wbg_dater_free(a: number): void;
export function __wbg_saider_free(a: number): void;
export function __wbg_saidifyret_free(a: number): void;
export function saidifyret_saider(a: number): number;
export function saidifyret_value(a: number, b: number): void;
export function saider_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number): void;
export function saider_saidify(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function saider_verify(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function saider_new_with_sad(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function saider_new_with_raw(a: number, b: number, c: number, d: number, e: number): void;
export function saider_new_with_qb64b(a: number, b: number, c: number): void;
export function saider_new_with_qb64(a: number, b: number, c: number): void;
export function saider_new_with_qb2(a: number, b: number, c: number): void;
export function saider_code(a: number, b: number): void;
export function saider_size(a: number): number;
export function saider_raw(a: number, b: number): void;
export function saider_qb64(a: number, b: number): void;
export function saider_qb64b(a: number, b: number): void;
export function saider_qb2(a: number, b: number): void;
export function __wbg_signer_free(a: number): void;
export function signer_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): void;
export function signer_new_with_raw(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function signer_new_with_qb64b(a: number, b: number, c: number, d: number): void;
export function signer_new_with_qb64(a: number, b: number, c: number, d: number): void;
export function signer_new_with_qb2(a: number, b: number, c: number, d: number): void;
export function signer_sign_unindexed(a: number, b: number, c: number, d: number): void;
export function signer_sign_indexed(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function signer_verfer(a: number): number;
export function signer_code(a: number, b: number): void;
export function signer_size(a: number): number;
export function signer_raw(a: number, b: number): void;
export function signer_qb64(a: number, b: number): void;
export function signer_qb64b(a: number, b: number): void;
export function signer_qb2(a: number, b: number): void;
export function __wbg_signers_free(a: number): void;
export function signers_len(a: number): number;
export function signers_is_empty(a: number): number;
export function signers_get(a: number, b: number): number;
export function __wbg_salter_free(a: number): void;
export function salter_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number): void;
export function salter_new_with_defaults(a: number, b: number, c: number): void;
export function salter_new_with_raw(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function salter_new_with_qb64b(a: number, b: number, c: number, d: number, e: number): void;
export function salter_new_with_qb64(a: number, b: number, c: number, d: number, e: number): void;
export function salter_new_with_qb2(a: number, b: number, c: number, d: number, e: number): void;
export function salter_stretch(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function salter_tier(a: number, b: number): void;
export function salter_signer(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function salter_signers(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number): void;
export function salter_code(a: number, b: number): void;
export function salter_size(a: number): number;
export function salter_raw(a: number, b: number): void;
export function salter_qb64(a: number, b: number): void;
export function salter_qb64b(a: number, b: number): void;
export function salter_qb2(a: number, b: number): void;
export function __wbg_serder_free(a: number): void;
export function serder_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function serder_new_with_ked(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function serder_verfers(a: number, b: number): void;
export function serder_digers(a: number, b: number): void;
export function serder_werfers(a: number, b: number): void;
export function serder_tholder(a: number, b: number): void;
export function serder_ntholder(a: number, b: number): void;
export function serder_sner(a: number, b: number): void;
export function serder_sn(a: number, b: number): void;
export function serder_fner(a: number, b: number): void;
export function serder__fn(a: number, b: number): void;
export function serder_code(a: number, b: number): void;
export function serder_raw(a: number, b: number): void;
export function serder_ked(a: number): number;
export function serder_ident(a: number, b: number): void;
export function serder_kind(a: number, b: number): void;
export function serder_size(a: number): number;
export function serder_version(a: number): number;
export function serder_saider(a: number): number;
export function matter_codex_code(a: number, b: number): void;
export function indexer_codex_code(a: number, b: number): void;
export function __wbg_diger_free(a: number): void;
export function diger_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number): void;
export function diger_new_with_ser(a: number, b: number, c: number, d: number, e: number): void;
export function diger_new_with_raw(a: number, b: number, c: number, d: number, e: number): void;
export function diger_new_with_qb64b(a: number, b: number, c: number): void;
export function diger_new_with_qb64(a: number, b: number, c: number): void;
export function diger_new_with_qb2(a: number, b: number, c: number): void;
export function diger_verify(a: number, b: number, c: number, d: number): void;
export function diger_compare_dig(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function diger_compare_diger(a: number, b: number, c: number, d: number, e: number): void;
export function diger_code(a: number, b: number): void;
export function diger_size(a: number): number;
export function diger_raw(a: number, b: number): void;
export function diger_qb64(a: number, b: number): void;
export function diger_qb64b(a: number, b: number): void;
export function diger_qb2(a: number, b: number): void;
export function __wbg_number_free(a: number): void;
export function number_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number): void;
export function number_new_with_num(a: number, b: number): void;
export function number_new_with_numh(a: number, b: number, c: number): void;
export function number_new_with_raw(a: number, b: number, c: number, d: number, e: number): void;
export function number_new_with_qb64b(a: number, b: number, c: number): void;
export function number_new_with_qb64(a: number, b: number, c: number): void;
export function number_new_with_qb2(a: number, b: number, c: number): void;
export function number_num(a: number, b: number): void;
export function number_numh(a: number, b: number): void;
export function number_code(a: number, b: number): void;
export function number_size(a: number): number;
export function number_raw(a: number, b: number): void;
export function number_qb64(a: number, b: number): void;
export function number_qb64b(a: number, b: number): void;
export function number_qb2(a: number, b: number): void;
export function seqner_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number): void;
export function seqner_new_with_sn(a: number, b: number): void;
export function seqner_new_with_snh(a: number, b: number, c: number): void;
export function seqner_new_with_raw(a: number, b: number, c: number, d: number, e: number): void;
export function seqner_new_with_qb64b(a: number, b: number, c: number): void;
export function seqner_new_with_qb64(a: number, b: number, c: number): void;
export function seqner_new_with_qb2(a: number, b: number, c: number): void;
export function seqner_sn(a: number, b: number): void;
export function seqner_snh(a: number, b: number): void;
export function seqner_code(a: number, b: number): void;
export function seqner_size(a: number): number;
export function seqner_raw(a: number, b: number): void;
export function seqner_qb64(a: number, b: number): void;
export function seqner_qb64b(a: number, b: number): void;
export function seqner_qb2(a: number, b: number): void;
export function __wbg_seqner_free(a: number): void;
export function __wbg_prefixer_free(a: number): void;
export function prefixer_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number): void;
export function prefixer_new_with_ked(a: number, b: number, c: number, d: number, e: number): void;
export function prefixer_new_with_raw(a: number, b: number, c: number, d: number, e: number): void;
export function prefixer_new_with_qb64b(a: number, b: number, c: number): void;
export function prefixer_new_with_qb64(a: number, b: number, c: number): void;
export function prefixer_new_with_qb2(a: number, b: number, c: number): void;
export function prefixer_verify(a: number, b: number, c: number, d: number): void;
export function prefixer_code(a: number, b: number): void;
export function prefixer_size(a: number): number;
export function prefixer_raw(a: number, b: number): void;
export function prefixer_qb64(a: number, b: number): void;
export function prefixer_qb64b(a: number, b: number): void;
export function prefixer_qb2(a: number, b: number): void;
export function __wbg_siger_free(a: number): void;
export function siger_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number): void;
export function siger_new_with_raw(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function siger_new_with_qb64b(a: number, b: number, c: number, d: number): void;
export function siger_new_with_qb64(a: number, b: number, c: number, d: number): void;
export function siger_new_with_qb2(a: number, b: number, c: number, d: number): void;
export function siger_verfer(a: number): number;
export function siger_code(a: number, b: number): void;
export function siger_raw(a: number, b: number): void;
export function siger_index(a: number): number;
export function siger_ondex(a: number): number;
export function siger_qb64(a: number, b: number): void;
export function siger_qb64b(a: number, b: number): void;
export function siger_qb2(a: number, b: number): void;
export function __wbg_verfer_free(a: number): void;
export function verfer_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function verfer_new_with_raw(a: number, b: number, c: number, d: number, e: number): void;
export function verfer_new_with_qb64b(a: number, b: number, c: number): void;
export function verfer_new_with_qb64(a: number, b: number, c: number): void;
export function verfer_new_with_qb2(a: number, b: number, c: number): void;
export function verfer_verify(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function verfer_code(a: number, b: number): void;
export function verfer_size(a: number): number;
export function verfer_raw(a: number, b: number): void;
export function verfer_qb64(a: number, b: number): void;
export function verfer_qb64b(a: number, b: number): void;
export function verfer_qb2(a: number, b: number): void;
export function __wbg_cigar_free(a: number): void;
export function cigar_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): void;
export function cigar_new_with_raw(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function cigar_new_with_qb64b(a: number, b: number, c: number, d: number): void;
export function cigar_new_with_qb64(a: number, b: number, c: number, d: number): void;
export function cigar_new_with_qb2(a: number, b: number, c: number, d: number): void;
export function cigar_verfer(a: number): number;
export function cigar_code(a: number, b: number): void;
export function cigar_raw(a: number, b: number): void;
export function cigar_size(a: number): number;
export function cigar_qb64(a: number, b: number): void;
export function cigar_qb64b(a: number, b: number): void;
export function cigar_qb2(a: number, b: number): void;
export function __wbg_version_free(a: number): void;
export function __wbg_tholder_free(a: number): void;
export function tholder_new(a: number, b: number, c: number, d: number, e: number): void;
export function tholder_new_with_thold(a: number, b: number): void;
export function tholder_new_with_limen(a: number, b: number, c: number): void;
export function tholder_new_with_sith(a: number, b: number): void;
export function tholder_thold(a: number): number;
export function tholder_weighted(a: number): number;
export function tholder_size(a: number): number;
export function tholder_num(a: number, b: number): void;
export function tholder_number(a: number): number;
export function tholder_bexter(a: number): number;
export function tholder_limen(a: number, b: number): void;
export function tholder_sith(a: number, b: number): void;
export function tholder_to_json(a: number, b: number): void;
export function tholder_satisfy(a: number, b: number, c: number, d: number): void;
export function __wbg_u128_free(a: number): void;
export function __wbg_value_free(a: number): void;
export function value_new(a: number, b: number): number;
export function value_value(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
