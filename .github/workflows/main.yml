name: Run Tests
on:
  push:
    branches:
      - 'main'
      - 'development'
  pull_request:
    branches:
      - 'main'
      - 'development'
  workflow_dispatch:
jobs:
  build:
    name: Build, lint, and test on Node ${{ matrix.node-version }} and ${{ matrix.os }}

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest]
        node-version: ['18', '20']

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm cache clean --force
          npm set registry https://registry.npmjs.org/
          npm ci
      
      - name: Check formatting
        run: npm run pretty:check 
      
      - name: Lint
        run: npm run lint
      
      - name: Test
        run: npm test -- --coverage=true
      
      - name: Build
        run: npm run build

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test:
    name: Run integration test using keria:${{ matrix.keria-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest']
        keria-version: ['0.2.0-dev4']
        node-version: ['20']
    env:
      KERIA_IMAGE_TAG: ${{ matrix.keria-version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: install deps
        run: npm ci
      - name: Build
        run: npm run build
      - name: Print docker compose config
        run: docker compose config
      - name: Start dependencies
        run: docker compose up deps --pull always
      - name: Run integration test
        run: npm run test:integration
      - name: Print logs
        run: docker compose logs
        if: always()

  audit:
    name: Find vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Run audit
        run: npm audit
